from classifieur_ai import entra√Æner_classifieur
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib
import os

# Donn√©es enrichies
exemples = [
    ("Facture EDF du 15 avril 2023", "Facture"),
    ("Facture Amazon - Commande 12345", "Facture"),
    ("Facture mensuelle Internet Orange", "Facture"),
    ("Re√ßu de paiement de la taxe fonci√®re", "Facture"),
    ("Devis pour la r√©novation de cuisine", "Devis"),
    ("Proposition de devis - soci√©t√© BTP", "Devis"),
    ("Estimation du projet peinture", "Devis"),
    ("Offre tarifaire pour travaux √©lectriques", "Devis"),
    ("Rapport trimestriel des ventes", "Rapport"),
    ("Rapport de stage - entreprise L'Or√©al", "Rapport"),
    ("Analyse financi√®re annuelle", "Rapport"),
    ("Compte-rendu de r√©union du 23 mai", "Rapport"),
    ("R√©sum√© de biologie - chapitre 3", "Notes"),
    ("Fiche de r√©vision histoire-g√©o", "Notes"),
    ("Cours de macro√©conomie L1", "Notes"),
    ("Introduction aux probabilit√©s", "Notes"),
    ("Contrat de travail √† dur√©e d√©termin√©e", "Contrat"),
    ("Accord de location meubl√©e", "Contrat"),
    ("Conditions g√©n√©rales de vente", "Contrat"),
    ("Contrat d‚Äôassurance habitation", "Contrat"),
    ("Curriculum Vitae - Julie Dupont", "CV"),
    ("Mon CV 2024 - d√©veloppeur web", "CV"),
    ("Exp√©riences professionnelles et comp√©tences", "CV"),
    ("Profil LinkedIn export√©", "CV"),
    ("Lettre de motivation pour master RH", "Lettre"),
    ("Lettre de recommandation √©tudiant", "Lettre"),
    ("Lettre de d√©mission", "Lettre"),
    ("Lettre administrative - demande de logement", "Lettre"),
    ("Objet : relance de facture impay√©e", "Mail"),
    ("Message de suivi de candidature", "Mail"),
    ("Email de confirmation de rendez-vous", "Mail"),
    ("Bonjour, voici le compte rendu de la r√©union", "Mail"),
]

# S√©paration en donn√©es d'entra√Ænement et de test
textes, labels = zip(*exemples)
X_train, X_test, y_train, y_test = train_test_split(textes, labels, test_size=0.25, random_state=42)

# Entra√Ænement
vect = TfidfVectorizer()
X_train_vect = vect.fit_transform(X_train)
X_test_vect = vect.transform(X_test)

clf = LogisticRegression(max_iter=1000)
clf.fit(X_train_vect, y_train)

# Pr√©diction et affichage
y_pred = clf.predict(X_test_vect)
print("\nüìä Rapport de performance du mod√®le :\n")
print(classification_report(y_test, y_pred))

# Sauvegarde du mod√®le
os.makedirs("modeles", exist_ok=True)
joblib.dump(clf, "modeles/modele_clf.pkl")
joblib.dump(vect, "modeles/vectorizer.pkl")
print("\n‚úÖ Nouveau mod√®le sauvegard√© dans 'modeles/'")

import os
import shutil
from classifieur_ai import predire_categorie
from pdfminer.high_level import extract_text as extract_text_pdf
from docx import Document  # pip install python-docx

def lire_contenu_fichier(chemin_fichier):
    _, extension = os.path.splitext(chemin_fichier)
    extension = extension[1:].lower()
    try:
        if extension == "txt":
            with open(chemin_fichier, 'r', encoding='utf-8', errors='ignore') as f:
                return f.read(500).lower()
        elif extension == "pdf":
            return extract_text_pdf(chemin_fichier, maxpages=1).lower()
        elif extension == "docx":
            try:
                document = Document(chemin_fichier)
                texte_docx = ""
                for paragraph in document.paragraphs:
                    texte_docx += paragraph.text + "\n"
                return texte_docx[:500].lower()
            except Exception as e:
                print(f"Erreur lors de la lecture du fichier DOCX {chemin_fichier}: {e}")
                return None
        else:
            return None
    except Exception as e:
        print(f"Erreur lors de la lecture de {chemin_fichier}: {e}")
        return None

def grouper_et_trier_fichiers(dossier):
    resultats_tri = {}

    for nom_fichier in os.listdir(dossier):
        chemin_complet = os.path.join(dossier, nom_fichier)
        if os.path.isfile(chemin_complet):
            _, extension = os.path.splitext(nom_fichier)
            extension = extension[1:].lower()
            categorie_predite = None

            if extension in ["jpg", "jpeg", "png", "gif"]:
                categorie = "Images"
            elif extension in ["mp4", "avi", "mov"]:
                categorie = "Vid√©os"
            elif extension in ["mp3", "wav", "aac"]:
                categorie = "Audio"
            elif extension in ["txt", "pdf", "docx"]:
                contenu = lire_contenu_fichier(chemin_complet)
                if contenu:
                    categorie_predite = predire_categorie(contenu)
                categorie = categorie_predite if categorie_predite else "Non_Classifi√©"
            else:
                categorie = "Autres_Fichiers"

            if categorie not in resultats_tri:
                resultats_tri[categorie] = []
            resultats_tri[categorie].append(chemin_complet)

    return resultats_tri

def deplacer_fichiers_par_categorie(resultats_tri, dossier_base):
    for categorie, fichiers in resultats_tri.items():
        chemin_categorie = os.path.join(dossier_base, categorie)
        os.makedirs(chemin_categorie, exist_ok=True)
        for chemin_fichier in fichiers:
            nom_fichier = os.path.basename(chemin_fichier)
            nouveau_chemin = os.path.join(chemin_categorie, nom_fichier)
            try:
                shutil.move(chemin_fichier, nouveau_chemin)
                print(f"‚úÖ {nom_fichier} d√©plac√© vers {categorie}/")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur d√©placement {nom_fichier} : {e}")

if __name__ == "__main__":
    dossier_a_trier = input("üìÇ Entrez le chemin du dossier √† trier : ").strip()
    if not os.path.isdir(dossier_a_trier):
        print("‚ùå Dossier introuvable.")
    else:
        resultats = grouper_et_trier_fichiers(dossier_a_trier)
        deplacer_fichiers_par_categorie(resultats, dossier_a_trier)
        print("üéâ Tri termin√©.")

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib
import os

MODELE_PATH = "modeles/modele_clf.pkl"
VECTORIZER_PATH = "modeles/vectorizer.pkl"

def entra√Æner_classifieur(exemples):
    textes, labels = zip(*exemples)
    vect = TfidfVectorizer()
    X = vect.fit_transform(textes)

    clf = LogisticRegression()
    clf.fit(X, labels)

    os.makedirs("modeles", exist_ok=True)
    joblib.dump(clf, MODELE_PATH)
    joblib.dump(vect, VECTORIZER_PATH)
    print("‚úÖ Mod√®le entra√Æn√© et sauvegard√©")

def predire_categorie(texte):
    try:
        clf = joblib.load(MODELE_PATH)
        vect = joblib.load(VECTORIZER_PATH)
        X = vect.transform([texte])
        prediction = clf.predict(X)
        return prediction[0]
    except FileNotFoundError:
        print("‚ö†Ô∏è Mod√®le d'IA non trouv√©. Veuillez ex√©cuter 'entrainement_test.py' d'abord.")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du chargement ou de la pr√©diction du mod√®le : {e}")
        return None
from classifieur_ai import entra√Æner_classifieur

exemples = [
    # Factures
    ("Facture EDF du 15 avril 2023", "Facture"),
    ("Facture Amazon - Commande 12345", "Facture"),
    ("Facture mensuelle Internet Orange", "Facture"),
    ("Re√ßu de paiement de la taxe fonci√®re", "Facture"),

    # Devis
    ("Devis pour la r√©novation de cuisine", "Devis"),
    ("Proposition de devis - soci√©t√© BTP", "Devis"),
    ("Estimation du projet peinture", "Devis"),
    ("Offre tarifaire pour travaux √©lectriques", "Devis"),

    # Rapports
    ("Rapport trimestriel des ventes", "Rapport"),
    ("Rapport de stage - entreprise L'Or√©al", "Rapport"),
    ("Analyse financi√®re annuelle", "Rapport"),
    ("Compte-rendu de r√©union du 23 mai", "Rapport"),

    # Notes de cours
    ("R√©sum√© de biologie - chapitre 3", "Notes"),
    ("Fiche de r√©vision histoire-g√©o", "Notes"),
    ("Cours de macro√©conomie L1", "Notes"),
    ("Introduction aux probabilit√©s", "Notes"),

    # Contrats
    ("Contrat de travail √† dur√©e d√©termin√©e", "Contrat"),
    ("Accord de location meubl√©e", "Contrat"),
    ("Conditions g√©n√©rales de vente", "Contrat"),
    ("Contrat d‚Äôassurance habitation", "Contrat"),

    # CV
    ("Curriculum Vitae - Julie Dupont", "CV"),
    ("Mon CV 2024 - d√©veloppeur web", "CV"),
    ("Exp√©riences professionnelles et comp√©tences", "CV"),
    ("Profil LinkedIn export√©", "CV"),

    # Lettres
    ("Lettre de motivation pour master RH", "Lettre"),
    ("Lettre de recommandation √©tudiant", "Lettre"),
    ("Lettre de d√©mission", "Lettre"),
    ("Lettre administrative - demande de logement", "Lettre"),

    # Mails
    ("Objet : relance de facture impay√©e", "Mail"),
    ("Message de suivi de candidature", "Mail"),
    ("Email de confirmation de rendez-vous", "Mail"),
    ("Bonjour, voici le compte rendu de la r√©union", "Mail"),
]

entra√Æner_classifieur(exemples)

print("‚úÖ Entra√Ænement enrichi termin√©. Mod√®le mis √† jour avec 8 cat√©gories.")
